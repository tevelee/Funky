{"Type Definitions.html#/c:FunkyFilterPredicate.h@T@FunkyFilterPredicate":{"name":"FunkyFilterPredicate","abstract":"<p>This type if being used when we need a boolean information of the elements of a collection, eg. filter or contains</p>"},"Type Definitions.html#/c:FunkySortComparableProtocol.h@T@FunkySortingBucketFilterBlock":{"name":"FunkySortingBucketFilterBlock","abstract":"<p>This type is used when filtering collections with <q>bucket sort</q></p>"},"Type Definitions.html#/c:FunkySortComparableProtocol.h@T@FunkySortBoolComparableBlock":{"name":"FunkySortBoolComparableBlock","abstract":"<p>This is a protocol for comparing objects, but we&rsquo;re only interested in their asending or descending information. It is usually used when comparing numbers in an array, like <code>return obj1 &lt; obj2</code> to have an ascending collection</p>"},"Type Definitions.html#/c:FunkySortComparableProtocol.h@T@FunkySortComparablePropertyProviderBlock":{"name":"FunkySortComparablePropertyProviderBlock","abstract":"<p>This is a protocol for comparing objects via a mapped value. In case of complex objects you can return a sub-property which implements the <code>-compare:</code> method, so the collection will be sorted by that computed property.</p>"},"Protocols/FunkySortComparable.html#/c:objc(pl)FunkySortComparable(im)compare:":{"name":"-compare:","abstract":"<p>This method compares the content of two objects (the current and the one given in the parameter)</p>","parent_name":"FunkySortComparable"},"Protocols/FunkyMutableCollectionWithCapacity.html#/c:objc(pl)FunkyMutableCollectionWithCapacity(cm)newWithCapacity:":{"name":"+newWithCapacity:","abstract":"<p>This method initialises a new instance with a given capacity</p>","parent_name":"FunkyMutableCollectionWithCapacity"},"Protocols/FunkyMutableCollection.html#/c:objc(pl)FunkyMutableCollection(im)addObject:":{"name":"-addObject:","abstract":"<p>This method returns inserts an object into the collection</p>","parent_name":"FunkyMutableCollection"},"Protocols/FunkyMutableCollection.html#/c:objc(pl)FunkyMutableCollection(im)removeAllObjects":{"name":"-removeAllObjects","abstract":"<p>This method removes all the contents of the collection, providing an empty mutable collection</p>","parent_name":"FunkyMutableCollection"},"Protocols/FunkyCollection.html#/c:objc(pl)FunkyCollection(im)count":{"name":"-count","abstract":"<p>This method returns the number of elements in the collection.</p>","parent_name":"FunkyCollection"},"Protocols/FunkyCollection.html#/c:objc(pl)FunkyCollection(im)copy":{"name":"-copy","abstract":"<p>This method returns an immutable version of the current collection</p>","parent_name":"FunkyCollection"},"Protocols/FunkyCollection.html#/c:objc(pl)FunkyCollection(im)mutableCopy":{"name":"-mutableCopy","abstract":"<p>This method returns a mutable version of the current collection</p>","parent_name":"FunkyCollection"},"Protocols/FunkyCollectionCounterpart.html#/c:objc(pl)FunkyCollectionCounterpart(cm)classForImmutableCounterPart":{"name":"+classForImmutableCounterPart","abstract":"<p>This method returns the immutable counterpart of the collection, eg. NSMutalbeArray</p>","parent_name":"FunkyCollectionCounterpart"},"Protocols/FunkyCollectionCounterpart.html#/c:objc(pl)FunkyCollectionCounterpart(cm)classForMutableCounterPart":{"name":"+classForMutableCounterPart","abstract":"<p>This method returns the mutable counterpart of the collection, eg. NSArray</p>","parent_name":"FunkyCollectionCounterpart"},"Protocols/FunkyCollectionCounterpart.html#/c:objc(pl)FunkyCollectionCounterpart(cm)classToFlatten":{"name":"+classToFlatten","abstract":"<p>This method returns the common type (usually class-cluster) to be processed when flattening the collection</p>","parent_name":"FunkyCollectionCounterpart"},"Protocols/FunkyCollectionCounterpart.html":{"name":"FunkyCollectionCounterpart","abstract":"<p>This is a protocol for generic collections to provide information about their mutable and immutable counterparts.</p>"},"Protocols/FunkyCollection.html":{"name":"FunkyCollection","abstract":"<p>This is a protocol for generic collections.</p>"},"Protocols/FunkyMutableCollection.html":{"name":"FunkyMutableCollection","abstract":"<p>This is a protocol for generic collections.</p>"},"Protocols/FunkyMutableCollectionWithCapacity.html":{"name":"FunkyMutableCollectionWithCapacity","abstract":"<p>This is a protocol for generic mutable collections to be initialised with capacity</p>"},"Protocols/FunkySortComparable.html":{"name":"FunkySortComparable","abstract":"<p>This is a protocol for comparing objects</p>"},"Constants.html#/c:@FunkyVersionNumber":{"name":"FunkyVersionNumber","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@FunkyVersionString":{"name":"FunkyVersionString","abstract":"<p>Undocumented</p>"},"Classes/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(py)filterBlock":{"name":"filterBlock","abstract":"<p>The filter to determine whether an item is belonging to the current bucket</p>","parent_name":"FunkySortingBucket"},"Classes/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(py)innerBucketComparator":{"name":"innerBucketComparator","abstract":"<p>A comparator to use inside the elements in this bucket</p>","parent_name":"FunkySortingBucket"},"Classes/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(cm)bucketWithBlock:":{"name":"+bucketWithBlock:","abstract":"<p>Creates a new bucket by initialising the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(py)filterBlock\">filterBlock</a></code> with the given parameter to determine whether an item is belonging to the bucket</p>","parent_name":"FunkySortingBucket"},"Classes/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(cm)bucketWithAllTheRest":{"name":"+bucketWithAllTheRest","abstract":"<p>Creates a new bucket by leaving the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(py)filterBlock\">filterBlock</a></code> nil, to collect all the remaining items which did not fit into the specific buckets. You can only hold one collector bucket in one bucket-filtering operation</p>","parent_name":"FunkySortingBucket"},"Classes/FunkySortingBucket.html#/c:objc(cs)FunkySortingBucket(im)isCollectorBucket":{"name":"-isCollectorBucket","abstract":"<p>The filter to determine whether an item is belonging to the current bucket</p>","parent_name":"FunkySortingBucket"},"Classes/FunkyPair.html#/c:objc(cs)FunkyPair(py)key":{"name":"key","abstract":"<p>The identifier of the stored value</p>","parent_name":"FunkyPair"},"Classes/FunkyPair.html#/c:objc(cs)FunkyPair(py)value":{"name":"value","abstract":"<p>The value belonging to the given key</p>","parent_name":"FunkyPair"},"Classes/FunkyPair.html#/c:objc(cs)FunkyPair(cm)pairWithKey:value:":{"name":"+pairWithKey:value:","abstract":"<p>Creates a new pair structure given the key and the value parameters</p>","parent_name":"FunkyPair"},"Classes/FunkyPair.html#/c:objc(cs)FunkyPair(im)pairByModifyingKey:":{"name":"-pairByModifyingKey:","abstract":"<p>Creates a new pair structure with the same value but with a new key</p>","parent_name":"FunkyPair"},"Classes/FunkyPair.html#/c:objc(cs)FunkyPair(im)pairByModifyingValue:":{"name":"-pairByModifyingValue:","abstract":"<p>Creates a new pair structure with the same key but with a new value</p>","parent_name":"FunkyPair"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)lexicographicalComparator":{"name":"+lexicographicalComparator","abstract":"<p>Provides a lexicographical comparator, so if the collection is sorted using this method, all the elements should be comparable using the <code>-compare:</code> method</p>","parent_name":"FunkySort"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)propertyComparator:":{"name":"+propertyComparator:","abstract":"<p>Provides a property comparator, mapping the current object into another comparable one which responds to the <code>-compare:</code> method. In case of a complex object you usually return a property of it which holds a primitive value, like NSString or NSNumber</p>","parent_name":"FunkySort"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)boolComparator:":{"name":"+boolComparator:","abstract":"<p>Provides a special comparator for comparing objects, but when only interested in their asending or descending information. It is usually used when comparing numbers in an array, like <code>return obj1 &lt; obj2</code> to have an ascending collection</p>","parent_name":"FunkySort"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)prioritizedComparator:":{"name":"+prioritizedComparator:","abstract":"<p>A composite comparator, providing multiple comparators in it, so when based on one comparation the objects are equal, the next one is being used.</p>","parent_name":"FunkySort"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)comparatorWithBuckets:":{"name":"+comparatorWithBuckets:","abstract":"<p>A composite comparator using buckets. It orders the list in a way, that it uses so called buckets which represent a subset of the elements. So the order is going to be made up of the order of these buckets.","parent_name":"FunkySort"},"Classes/FunkySort.html#/c:objc(cs)FunkySort(cm)comparatorWithBuckets:defaultInnerBucketComparator:":{"name":"+comparatorWithBuckets:defaultInnerBucketComparator:","abstract":"<p>Same as <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/FunkySort.html#/c:objc(cs)FunkySort(cm)comparatorWithBuckets:\">+[FunkySort comparatorWithBuckets:]</a></code> but with an addition to set the default inner bucket comparator.</p>","parent_name":"FunkySort"},"Classes/FunkyFilter.html#/c:objc(cs)FunkyFilter(cm)equalTo:":{"name":"+equalTo:","abstract":"<p>An equality predicate telling that the object is equal to another one</p>","parent_name":"FunkyFilter"},"Classes/FunkyFilter.html#/c:objc(cs)FunkyFilter(cm)isKindOfClass:":{"name":"+isKindOfClass:","abstract":"<p>A predicate telling that the object is a subclass (or its class is equal to) the provided class</p>","parent_name":"FunkyFilter"},"Classes/FunkyFilter.html#/c:objc(cs)FunkyFilter(cm)isMemberOfClass:":{"name":"+isMemberOfClass:","abstract":"<p>A predicate telling that the object&rsquo;s class is equal to the provided class</p>","parent_name":"FunkyFilter"},"Classes/FunkyFilter.html#/c:objc(cs)FunkyFilter(cm)respondsToSelector:":{"name":"+respondsToSelector:","abstract":"<p>A predicate telling that the object responds to the given selector</p>","parent_name":"FunkyFilter"},"Classes/FunkyNSSetSubclass.html#/c:objc(cs)FunkyNSSetSubclass(im)NSSet":{"name":"-NSSet","abstract":"<p>Converts the current subclass into a basic NSSet</p>","parent_name":"FunkyNSSetSubclass"},"Classes/FunkyNSMutableSetSubclass.html#/c:objc(cs)FunkyNSMutableSetSubclass(im)NSMutableSet":{"name":"-NSMutableSet","abstract":"<p>Converts the current subclass into a basic NSMutableSet</p>","parent_name":"FunkyNSMutableSetSubclass"},"Classes/FunkyNSMutableDictionarySubclass.html#/c:objc(cs)FunkyNSMutableDictionarySubclass(im)NSMutableDictionary":{"name":"-NSMutableDictionary","abstract":"<p>Converts the current subclass into a basic NSMutableDictionary</p>","parent_name":"FunkyNSMutableDictionarySubclass"},"Classes/FunkyNSDictionarySubclass.html#/c:objc(cs)FunkyNSDictionarySubclass(im)NSDictionary":{"name":"-NSDictionary","abstract":"<p>Converts the current subclass into a basic NSDictionary</p>","parent_name":"FunkyNSDictionarySubclass"},"Classes/FunkyNSMutableArraySubclass.html#/c:objc(cs)FunkyNSMutableArraySubclass(im)NSMutableArray":{"name":"-NSMutableArray","abstract":"<p>Converts the current subclass into a basic NSMutableArray</p>","parent_name":"FunkyNSMutableArraySubclass"},"Classes/FunkyNSArraySubclass.html#/c:objc(cs)FunkyNSArraySubclass(im)NSArray":{"name":"-NSArray","abstract":"<p>Converts the current subclass into a basic NSArray</p>","parent_name":"FunkyNSArraySubclass"},"Classes/FunkyNSArraySubclass.html":{"name":"FunkyNSArraySubclass","abstract":"<p>This is a subclass of the NSArray class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSArray, as the implementation uses NSArray for the backing store.</p>"},"Classes/FunkyNSMutableArraySubclass.html":{"name":"FunkyNSMutableArraySubclass","abstract":"<p>This is a subclass of the NSMutableArray class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSMutableArray, as the implementation uses NSMutableArray for the backing store.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSArray":{"name":"FunkyNilStoringNSArray","abstract":"<p>This is a subclass of the NSArray class-cluster, providing nil-storing behaviour to NSArray. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSMutableArray":{"name":"FunkyNilStoringNSMutableArray","abstract":"<p>This is a subclass of the NSArray class-cluster, providing nil-storing behaviour to NSMutableArray. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSArray":{"name":"FunkyNilTolerantNSArray","abstract":"<p>This is a subclass of the NSArray class-cluster, providing nil-tolerant behaviour to NSArray. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSMutableArray":{"name":"FunkyNilTolerantNSMutableArray","abstract":"<p>This is a subclass of the NSArray class-cluster, providing nil-tolerant behaviour to NSMutableArray. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes/FunkyNSDictionarySubclass.html":{"name":"FunkyNSDictionarySubclass","abstract":"<p>This is a subclass of the NSDictionary class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSDictionary, as the implementation uses NSDictionary for the backing store.</p>"},"Classes/FunkyNSMutableDictionarySubclass.html":{"name":"FunkyNSMutableDictionarySubclass","abstract":"<p>This is a subclass of the NSMutableDictionary class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSMutableDictionary, as the implementation uses NSMutableDictionary for the backing store.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSDictionary":{"name":"FunkyNilStoringNSDictionary","abstract":"<p>This is a subclass of the NSDictionary class-cluster, providing nil-storing behaviour to NSDictionary. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSMutableDictionary":{"name":"FunkyNilStoringNSMutableDictionary","abstract":"<p>This is a subclass of the NSDictionary class-cluster, providing nil-storing behaviour to NSMutableDictionary. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSDictionary":{"name":"FunkyNilTolerantNSDictionary","abstract":"<p>This is a subclass of the NSDictionary class-cluster, providing nil-tolerant behaviour to NSDictionary. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSMutableDictionary":{"name":"FunkyNilTolerantNSMutableDictionary","abstract":"<p>This is a subclass of the NSDictionary class-cluster, providing nil-tolerant behaviour to NSMutableDictionary. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes/FunkyNSMutableSetSubclass.html":{"name":"FunkyNSMutableSetSubclass","abstract":"<p>This is a subclass of the NSMutableSet class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSMutableSet, as the implementation uses NSMutableSet for the backing store.</p>"},"Classes/FunkyNSSetSubclass.html":{"name":"FunkyNSSetSubclass","abstract":"<p>This is a subclass of the NSSet class-cluster, overriding the minimum set of getters and setters in order to further subclassing it, customizing the behaviour. This particular class is equivalent of an NSSet, as the implementation uses NSSet for the backing store.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSSet":{"name":"FunkyNilStoringNSSet","abstract":"<p>This is a subclass of the NSSet class-cluster, providing nil-storing behaviour to NSSet. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilStoringNSMutableSet":{"name":"FunkyNilStoringNSMutableSet","abstract":"<p>This is a subclass of the NSSet class-cluster, providing nil-storing behaviour to NSMutableSet. Whenever you would insert nil values into the set, it will insert them instead of crashing. You can also get back these values via the getters.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSSet":{"name":"FunkyNilTolerantNSSet","abstract":"<p>This is a subclass of the NSSet class-cluster, providing nil-tolerant behaviour to NSSet. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes.html#/c:objc(cs)FunkyNilTolerantNSMutableSet":{"name":"FunkyNilTolerantNSMutableSet","abstract":"<p>This is a subclass of the NSSet class-cluster, providing nil-tolerant behaviour to NSMutableSet. Whenever you would insert nil values into the set, it will disregard those cases instead of crashing.</p>"},"Classes/FunkyFilter.html":{"name":"FunkyFilter","abstract":"<p>This is a collection of methods to provide filter predicate helpers</p>"},"Classes/FunkySort.html":{"name":"FunkySort","abstract":"<p>This is a collection of methods to provide comparator helpers</p>"},"Classes/FunkyPair.html":{"name":"FunkyPair","abstract":"<p>This is a data structure representing a key-value pair</p>"},"Classes/FunkySortingBucket.html":{"name":"FunkySortingBucket","abstract":"<p>This is a data structure representing a bucket of items when bucket-sorting </p>"},"Categories/NSMutableSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableSet(im)funky_takeUnion:":{"name":"-funky_takeUnion:","abstract":"<p>Takes the union of the two sets</p>","parent_name":"NSMutableSet(FunkyPrefixedUtilities)"},"Categories/NSMutableSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableSet(im)funky_takeMinus:":{"name":"-funky_takeMinus:","abstract":"<p>Takes the minus of the two sets by taking the current minus the provided one.</p>","parent_name":"NSMutableSet(FunkyPrefixedUtilities)"},"Categories/NSMutableSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableSet(im)funky_takeIntersection:":{"name":"-funky_takeIntersection:","abstract":"<p>Takes the intersection of the two sets.</p>","parent_name":"NSMutableSet(FunkyPrefixedUtilities)"},"Categories/NSMutableSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableSet(im)funky_filter:":{"name":"-funky_filter:","abstract":"<p>Filters the set using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableSet(FunkyPrefixedUtilities)"},"Categories/NSMutableSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableSet(im)funky_flatten":{"name":"-funky_flatten","abstract":"<p>Makes the set structure a squence with flat elements, containing no NSSets</p>","parent_name":"NSMutableSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_all:":{"name":"-funky_all:","abstract":"<p>Returns whether the condition matches all elements in the set</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_none:":{"name":"-funky_none:","abstract":"<p>Returns whether the condition matches no elements in the set</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_contains:":{"name":"-funky_contains:","abstract":"<p>Returns whether the condition matches at least one element in the set</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_count:":{"name":"-funky_count:","abstract":"<p>Returns the number of elements the given condition matches in the set, like if you would filter the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_map:":{"name":"-funky_map:","abstract":"<p>Returns a new NSSet instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_nilTolerantMap:":{"name":"-funky_nilTolerantMap:","abstract":"<p>Returns a new NSSet instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_flatMap:":{"name":"-funky_flatMap:","abstract":"<p>Returns a new NSSet instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter. Same as map, but the result is going to be flattened, so if you return an NSSet any iteration, it is going to be converted into a flat structure, not an set of sets.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_filtered:":{"name":"-funky_filtered:","abstract":"<p>Returns a new NSSet instance with the element, that are passing the returned expression in the original set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_flattened":{"name":"-funky_flattened","abstract":"<p>Flattens the set, meaning that if it consisted of Set items, they are going to be flattened into one flat structure of elements. An set of sets will transform to an set of elements from each of the previous sets. This computation is performed deeply, meaning that it contontued flattening elements, until they produce a flat structure.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_takingUnion:":{"name":"-funky_takingUnion:","abstract":"<p>Takes the union of the two sets.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_takingMinus:":{"name":"-funky_takingMinus:","abstract":"<p>Takes a set which is the current minus the provided one.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_takingIntersection:":{"name":"-funky_takingIntersection:","abstract":"<p>Takes the intersection of the two sets.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_forEach:":{"name":"-funky_forEach:","abstract":"<p>Calls every element of the set once.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_groupBy:":{"name":"-funky_groupBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, the result (of which is going to get included) is unpredicatble.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_associateBy:":{"name":"-funky_associateBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. The elements in the resulting Dictionary are sets, so if multiple elements return the same keys, all of them are going to be included in the value.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_reduce:withInitialValue:":{"name":"-funky_reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_sum:":{"name":"-funky_sum:","abstract":"<p>A special use-case of reduce, which summarises the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_average:":{"name":"-funky_average:","abstract":"<p>A special use-case of reduce, which takes the average value of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_minValue:":{"name":"-funky_minValue:","abstract":"<p>A special use-case of reduce, which takes the minimum of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_maxValue:":{"name":"-funky_maxValue:","abstract":"<p>A special use-case of reduce, which takes the maximum of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_minItems:":{"name":"-funky_minItems:","abstract":"<p>Returns an set with all the minimal value elements in the set, where the minimum was computed by the returned double value for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSSet(FunkyPrefixedUtilities).html#/c:objc(cs)NSSet(im)funky_maxItems:":{"name":"-funky_maxItems:","abstract":"<p>Returns an set with all the maximal value elements in the set, where the maximum was computed by the returned double value for each element in the set.</p>","parent_name":"NSSet(FunkyPrefixedUtilities)"},"Categories/NSObject(FunkyPrefixedUtilities).html#/c:objc(cs)NSObject(im)funky_apply:":{"name":"-funky_apply:","abstract":"<p>Applies some logic on the current object and returns it afterwards.</p>","parent_name":"NSObject(FunkyPrefixedUtilities)"},"Categories/NSMutableDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableDictionary(im)funky_merge:":{"name":"-funky_merge:","abstract":"<p>Concatenates the current dictionary (in place) with the one given in the parameter. It does this by putting the existing elements first, and the elements in the provided dictionary afterwards.</p>","parent_name":"NSMutableDictionary(FunkyPrefixedUtilities)"},"Categories/NSMutableDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableDictionary(im)funky_filter:":{"name":"-funky_filter:","abstract":"<p>Filters the dictionary (in palce) using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_map:":{"name":"-funky_map:","abstract":"<p>Returns a new NSDictionary instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_nilTolerantMap:":{"name":"-funky_nilTolerantMap:","abstract":"<p>Returns a new NSDictionary instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_merged:":{"name":"-funky_merged:","abstract":"<p>Returns a new NSDictionary instance, in which concatenates the two dictionaries by putting the existing elements first, and the elements in the provided dictionary after them.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_forEach:":{"name":"-funky_forEach:","abstract":"<p>Calls every element of the dictionary once.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_invertedObjectsAndKeys":{"name":"-funky_invertedObjectsAndKeys","abstract":"<p>Returns a new NSDictionary instance, in which uses the current values as the dictionary and keys and vice-versa. If multiple values are holding the same key, the result (which key is used) is unpredictable.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_filtered:":{"name":"-funky_filtered:","abstract":"<p>Filters the dictionary using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_all:":{"name":"-funky_all:","abstract":"<p>Returns whether the condition matches all elements in the dictionary</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_none:":{"name":"-funky_none:","abstract":"<p>Returns whether the condition matches no elements in the dictionary</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_contains:":{"name":"-funky_contains:","abstract":"<p>Returns whether the condition matches at least one element in the dictionary</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_count:":{"name":"-funky_count:","abstract":"<p>Returns the number of elements the given condition matches in the dictionary, like if you would filter the dictionary.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_reduce:withInitialValue:":{"name":"-funky_reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_keys:":{"name":"-funky_keys:","abstract":"<p>Returns all the keys where the given predicate matches the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSDictionary(FunkyPrefixedUtilities).html#/c:objc(cs)NSDictionary(im)funky_values:":{"name":"-funky_values:","abstract":"<p>Returns all the values where the given predicate matches the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_flatten":{"name":"-funky_flatten","abstract":"<p>Makes the array structure a squence with flat elements, containing no NSArrays</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_reverse":{"name":"-funky_reverse","abstract":"<p>Puts the containing items (in place) in a reversed order.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_shuffle":{"name":"-funky_shuffle","abstract":"<p>Shuffles the containing items (in place) in a random fashion.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_removeDuplicates":{"name":"-funky_removeDuplicates","abstract":"<p>Makes the array unique (in place) by removing the duplicated items from the containing items. The method does this keeping the first occurence and removes the further duplications.","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_merge:":{"name":"-funky_merge:","abstract":"<p>Concatenates the current array (in place) with the one given in the parameter. It does this by putting the existing elements first, and the elements in the provided array afterwards.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_sort:":{"name":"-funky_sort:","abstract":"<p>Sorts the array (in place) using the given comparator.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(im)funky_filter:":{"name":"-funky_filter:","abstract":"<p>Filters the array using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(cm)funky_arrayWithItem:repeated:":{"name":"+funky_arrayWithItem:repeated:","abstract":"<p>Creates a mutable array by repeating the same <code>item</code> by <code>repeat</code> number of times. The size of the array is going to be qual to <code>repeat</code>, only consisting of <code>item</code> objects.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(cm)funky_arrayWithArray:nextItem:repeated:":{"name":"+funky_arrayWithArray:nextItem:repeated:","abstract":"<p>Creates a mutable array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by <code>repeated</code> number of times.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSMutableArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSMutableArray(cm)funky_arrayWithArray:nextItem:until:":{"name":"+funky_arrayWithArray:nextItem:until:","abstract":"<p>Creates a mutable array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by until the block parameter <code>until</code> returns YES.</p>","parent_name":"NSMutableArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_all:":{"name":"-funky_all:","abstract":"<p>Returns whether the condition matches all elements in the array</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_none:":{"name":"-funky_none:","abstract":"<p>Returns whether the condition matches no elements in the array</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_contains:":{"name":"-funky_contains:","abstract":"<p>Returns whether the condition matches at least one element in the array</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_count:":{"name":"-funky_count:","abstract":"<p>Returns the number of elements the given condition matches in the array, like if you would filter the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_map:":{"name":"-funky_map:","abstract":"<p>Returns a new NSArray instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_nilTolerantMap:":{"name":"-funky_nilTolerantMap:","abstract":"<p>Returns a new NSArray instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_mapWithIndex:":{"name":"-funky_mapWithIndex:","abstract":"<p>Same as map, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_nilTolerantMapWithIndex:":{"name":"-funky_nilTolerantMapWithIndex:","abstract":"<p>Same as nil-tolerant map, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_flatMap:":{"name":"-funky_flatMap:","abstract":"<p>Returns a new NSArray instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter. Same as map, but the result is going to be flattened, so if you return an NSArray any iteration, it is going to be converted into a flat structure, not an array of arrays.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_flatMapWithIndex:":{"name":"-funky_flatMapWithIndex:","abstract":"<p>Same as flatMap, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_filtered:":{"name":"-funky_filtered:","abstract":"<p>Returns a new NSArray instance with the element, that are passing the returned expression in the original array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_flattened":{"name":"-funky_flattened","abstract":"<p>Flattens the array, meaning that if it consisted of Array items, they are going to be flattened into one flat structure of elements. An array of arrays will transform to an array of elements from each of the previous arrays. This computation is performed deeply, meaning that it contontued flattening elements, until they produce a flat structure.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_merged:":{"name":"-funky_merged:","abstract":"<p>Returns a new NSArray instance, in which concatenates the two arrays by putting the existing elements first, and the elements in the provided array after them.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_forEach:":{"name":"-funky_forEach:","abstract":"<p>Calls every element of the array once.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_forEachWithIndex:":{"name":"-funky_forEachWithIndex:","abstract":"<p>Calls every element of the array once. Same as forEach, but the block contains the index of the current element as well.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_groupByUsingFirst:":{"name":"-funky_groupByUsingFirst:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, this function will use the first matching element.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_groupByUsingLast:":{"name":"-funky_groupByUsingLast:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, this function will use the last matching element.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_associateBy:":{"name":"-funky_associateBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. The elements in the resulting Dictionary are arrays, so if multiple elements return the same keys, all of them are going to be included in the value.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_reduce:withInitialValue:":{"name":"-funky_reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_sum:":{"name":"-funky_sum:","abstract":"<p>A special use-case of reduce, which summarises the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_average:":{"name":"-funky_average:","abstract":"<p>A special use-case of reduce, which takes the average value of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_minValue:":{"name":"-funky_minValue:","abstract":"<p>A special use-case of reduce, which takes the minimum of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_maxValue:":{"name":"-funky_maxValue:","abstract":"<p>A special use-case of reduce, which takes the maximum of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_minItems:":{"name":"-funky_minItems:","abstract":"<p>Returns an array with all the minimal value elements in the array, where the minimum was computed by the returned double value for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_maxItems:":{"name":"-funky_maxItems:","abstract":"<p>Returns an array with all the maximal value elements in the array, where the maximum was computed by the returned double value for each element in the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_firstIndex":{"name":"-funky_firstIndex","abstract":"<p>Returns the first index of the array: 0</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_lastIndex":{"name":"-funky_lastIndex","abstract":"<p>Returns the last index of the array: count - 1</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_first:":{"name":"-funky_first:","abstract":"<p>Returns the first element, where the predicate matches</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_firstIndex:":{"name":"-funky_firstIndex:","abstract":"<p>Returns the index of the first element, where the predicate matches</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_last:":{"name":"-funky_last:","abstract":"<p>Returns the last element, where the predicate matches</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_lastIndex:":{"name":"-funky_lastIndex:","abstract":"<p>Returns the index of the last element, where the predicate matches</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_take:":{"name":"-funky_take:","abstract":"<p>Returns an array of the values where the predicate matches, but only until it&rsquo;s a consecutive sequence. Once the predicate returns NO, those elements are going to be dropped.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_takeLast:":{"name":"-funky_takeLast:","abstract":"<p>Returns an array of the values where the predicate matches, but only the last consecutive sequence of these element. Same as take, but from the end of the array.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueExclusive:":{"name":"-funky_fromValueExclusive:","abstract":"<p>Returns an array of the values starting from the given object, not including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueInclusive:":{"name":"-funky_fromValueInclusive:","abstract":"<p>Returns an array of the values starting from the given object, including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexExclusive:":{"name":"-funky_fromIndexExclusive:","abstract":"<p>Returns an array of the values starting from the given index, not including the object at the given index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexInclusive:":{"name":"-funky_fromIndexInclusive:","abstract":"<p>Returns an array of the values starting from the given index, including the object at the fiven index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_untilValueExclusive:":{"name":"-funky_untilValueExclusive:","abstract":"<p>Returns an array of the values until the given object, not including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_untilValueInclusive:":{"name":"-funky_untilValueInclusive:","abstract":"<p>Returns an array of the values until the given object, including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_untilIndexExclusive:":{"name":"-funky_untilIndexExclusive:","abstract":"<p>Returns an array of the values until the given index, not including the object at the given index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_untilIndexInclusive:":{"name":"-funky_untilIndexInclusive:","abstract":"<p>Returns an array of the values until the given index, including the object at the fiven index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueExclusive:untilValueExclusive:":{"name":"-funky_fromValueExclusive:untilValueExclusive:","abstract":"<p>Returns an array of the values between the given two input objects, excluding both from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueExclusive:untilValueInclusive:":{"name":"-funky_fromValueExclusive:untilValueInclusive:","abstract":"<p>Returns an array of the values between the given two input objects, excluding <code>from</code>, including <code>until</code> from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueInclusive:untilValueExclusive:":{"name":"-funky_fromValueInclusive:untilValueExclusive:","abstract":"<p>Returns an array of the values between the given two input objects, including <code>from</code>, excluding <code>until</code> from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromValueInclusive:untilValueInclusive:":{"name":"-funky_fromValueInclusive:untilValueInclusive:","abstract":"<p>Returns an array of the values between the given two input objects, including both from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexExclusive:untilIndexExclusive:":{"name":"-funky_fromIndexExclusive:untilIndexExclusive:","abstract":"<p>Returns an array of the values between the given two indices, excluding both objects (at the given indices) from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexExclusive:untilIndexInclusive:":{"name":"-funky_fromIndexExclusive:untilIndexInclusive:","abstract":"<p>Returns an array of the values between the given two indices, excluding the object at the index <code>from</code>, including the one at the index <code>until</code> from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexInclusive:untilIndexExclusive:":{"name":"-funky_fromIndexInclusive:untilIndexExclusive:","abstract":"<p>Returns an array of the values between the given two indices, including the object at the index <code>from</code>, excluding the one at the index <code>until</code> from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_fromIndexInclusive:untilIndexInclusive:":{"name":"-funky_fromIndexInclusive:untilIndexInclusive:","abstract":"<p>Returns an array of the values between the given two indices, including both objects (at the given indices) from the result set.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_unique":{"name":"-funky_unique","abstract":"<p>Returns an array where is object is unique, so the resulting array does not contain any duplicates.","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_reversed":{"name":"-funky_reversed","abstract":"<p>Returns an array where the items are in a reversed order.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_shuffled":{"name":"-funky_shuffled","abstract":"<p>Returns an array where the items are shuffled randomly.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(im)funky_sorted:":{"name":"-funky_sorted:","abstract":"<p>Returns an array sorted using the given comparator.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(cm)funky_arrayWithItem:repeated:":{"name":"+funky_arrayWithItem:repeated:","abstract":"<p>Creates an array by repeating the same <code>item</code> by <code>repeat</code> number of times. The size of the array is going to be qual to <code>repeat</code>, only consisting of <code>item</code> objects.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(cm)funky_arrayWithArray:nextItem:repeated:":{"name":"+funky_arrayWithArray:nextItem:repeated:","abstract":"<p>Creates an array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by <code>repeated</code> number of times.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSArray(FunkyPrefixedUtilities).html#/c:objc(cs)NSArray(cm)funky_arrayWithArray:nextItem:until:":{"name":"+funky_arrayWithArray:nextItem:until:","abstract":"<p>Creates an array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by until the block parameter <code>until</code> returns YES.</p>","parent_name":"NSArray(FunkyPrefixedUtilities)"},"Categories/NSMutableSet(FunkyUtilities).html#/c:objc(cs)NSMutableSet(im)takeUnion:":{"name":"-takeUnion:","abstract":"<p>Takes the union of the two sets</p>","parent_name":"NSMutableSet(FunkyUtilities)"},"Categories/NSMutableSet(FunkyUtilities).html#/c:objc(cs)NSMutableSet(im)takeMinus:":{"name":"-takeMinus:","abstract":"<p>Takes the minus of the two sets by taking the current minus the provided one.</p>","parent_name":"NSMutableSet(FunkyUtilities)"},"Categories/NSMutableSet(FunkyUtilities).html#/c:objc(cs)NSMutableSet(im)takeIntersection:":{"name":"-takeIntersection:","abstract":"<p>Takes the intersection of the two sets.</p>","parent_name":"NSMutableSet(FunkyUtilities)"},"Categories/NSMutableSet(FunkyUtilities).html#/c:objc(cs)NSMutableSet(im)filter:":{"name":"-filter:","abstract":"<p>Filters the set using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableSet(FunkyUtilities)"},"Categories/NSMutableSet(FunkyUtilities).html#/c:objc(cs)NSMutableSet(im)flatten":{"name":"-flatten","abstract":"<p>Makes the set structure a squence with flat elements, containing no NSSets</p>","parent_name":"NSMutableSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)all:":{"name":"-all:","abstract":"<p>Returns whether the condition matches all elements in the set</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)none:":{"name":"-none:","abstract":"<p>Returns whether the condition matches no elements in the set</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)contains:":{"name":"-contains:","abstract":"<p>Returns whether the condition matches at least one element in the set</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)count:":{"name":"-count:","abstract":"<p>Returns the number of elements the given condition matches in the set, like if you would filter the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)map:":{"name":"-map:","abstract":"<p>Returns a new NSSet instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)nilTolerantMap:":{"name":"-nilTolerantMap:","abstract":"<p>Returns a new NSSet instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)flatMap:":{"name":"-flatMap:","abstract":"<p>Returns a new NSSet instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter. Same as map, but the result is going to be flattened, so if you return an NSSet any iteration, it is going to be converted into a flat structure, not an set of sets.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)filtered:":{"name":"-filtered:","abstract":"<p>Returns a new NSSet instance with the element, that are passing the returned expression in the original set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)flattened":{"name":"-flattened","abstract":"<p>Flattens the set, meaning that if it consisted of Set items, they are going to be flattened into one flat structure of elements. An set of sets will transform to an set of elements from each of the previous sets. This computation is performed deeply, meaning that it contontued flattening elements, until they produce a flat structure.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)takingUnion:":{"name":"-takingUnion:","abstract":"<p>Takes the union of the two sets.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)takingMinus:":{"name":"-takingMinus:","abstract":"<p>Takes a set which is the current minus the provided one.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)takingIntersection:":{"name":"-takingIntersection:","abstract":"<p>Takes the intersection of the two sets.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)forEach:":{"name":"-forEach:","abstract":"<p>Calls every element of the set once.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)groupBy:":{"name":"-groupBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, the result (of which is going to get included) is unpredicatble.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)associateBy:":{"name":"-associateBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. The elements in the resulting Dictionary are sets, so if multiple elements return the same keys, all of them are going to be included in the value.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)reduce:withInitialValue:":{"name":"-reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)sum:":{"name":"-sum:","abstract":"<p>A special use-case of reduce, which summarises the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)average:":{"name":"-average:","abstract":"<p>A special use-case of reduce, which takes the average value of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)minValue:":{"name":"-minValue:","abstract":"<p>A special use-case of reduce, which takes the minimum of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)maxValue:":{"name":"-maxValue:","abstract":"<p>A special use-case of reduce, which takes the maximum of the returned double values for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)minItems:":{"name":"-minItems:","abstract":"<p>Returns an set with all the minimal value elements in the set, where the minimum was computed by the returned double value for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSSet(FunkyUtilities).html#/c:objc(cs)NSSet(im)maxItems:":{"name":"-maxItems:","abstract":"<p>Returns an set with all the maximal value elements in the set, where the maximum was computed by the returned double value for each element in the set.</p>","parent_name":"NSSet(FunkyUtilities)"},"Categories/NSObject(FunkyUtilities).html#/c:objc(cs)NSObject(im)apply:":{"name":"-apply:","abstract":"<p>Applies some logic on the current object and returns it afterwards.</p>","parent_name":"NSObject(FunkyUtilities)"},"Categories/NSMutableDictionary(FunkyUtilities).html#/c:objc(cs)NSMutableDictionary(im)merge:":{"name":"-merge:","abstract":"<p>Concatenates the current dictionary (in place) with the one given in the parameter. It does this by putting the existing elements first, and the elements in the provided dictionary afterwards.</p>","parent_name":"NSMutableDictionary(FunkyUtilities)"},"Categories/NSMutableDictionary(FunkyUtilities).html#/c:objc(cs)NSMutableDictionary(im)filter:":{"name":"-filter:","abstract":"<p>Filters the dictionary (in palce) using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)map:":{"name":"-map:","abstract":"<p>Returns a new NSDictionary instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)nilTolerantMap:":{"name":"-nilTolerantMap:","abstract":"<p>Returns a new NSDictionary instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)merged:":{"name":"-merged:","abstract":"<p>Returns a new NSDictionary instance, in which concatenates the two dictionaries by putting the existing elements first, and the elements in the provided dictionary after them.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)forEach:":{"name":"-forEach:","abstract":"<p>Calls every element of the dictionary once.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)invertedObjectsAndKeys":{"name":"-invertedObjectsAndKeys","abstract":"<p>Returns a new NSDictionary instance, in which uses the current values as the dictionary and keys and vice-versa. If multiple values are holding the same key, the result (which key is used) is unpredictable.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)filtered:":{"name":"-filtered:","abstract":"<p>Filters the dictionary using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)all:":{"name":"-all:","abstract":"<p>Returns whether the condition matches all elements in the dictionary</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)none:":{"name":"-none:","abstract":"<p>Returns whether the condition matches no elements in the dictionary</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)contains:":{"name":"-contains:","abstract":"<p>Returns whether the condition matches at least one element in the dictionary</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)count:":{"name":"-count:","abstract":"<p>Returns the number of elements the given condition matches in the dictionary, like if you would filter the dictionary.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)reduce:withInitialValue:":{"name":"-reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)keys:":{"name":"-keys:","abstract":"<p>Returns all the keys where the given predicate matches the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSDictionary(FunkyUtilities).html#/c:objc(cs)NSDictionary(im)values:":{"name":"-values:","abstract":"<p>Returns all the values where the given predicate matches the elements of the dictionary.</p>","parent_name":"NSDictionary(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)flatten":{"name":"-flatten","abstract":"<p>Makes the array structure a squence with flat elements, containing no NSArrays</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)reverse":{"name":"-reverse","abstract":"<p>Puts the containing items (in place) in a reversed order.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)shuffle":{"name":"-shuffle","abstract":"<p>Shuffles the containing items (in place) in a random fashion.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)removeDuplicates":{"name":"-removeDuplicates","abstract":"<p>Makes the array unique (in place) by removing the duplicated items from the containing items. The method does this keeping the first occurence and removes the further duplications.","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)merge:":{"name":"-merge:","abstract":"<p>Concatenates the current array (in place) with the one given in the parameter. It does this by putting the existing elements first, and the elements in the provided array afterwards.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)sort:":{"name":"-sort:","abstract":"<p>Sorts the array (in place) using the given comparator.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(im)filter:":{"name":"-filter:","abstract":"<p>Filters the array using the given predicate, keeping the elements that are passing the test.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(cm)arrayWithItem:repeated:":{"name":"+arrayWithItem:repeated:","abstract":"<p>Creates a mutable array by repeating the same <code>item</code> by <code>repeat</code> number of times. The size of the array is going to be qual to <code>repeat</code>, only consisting of <code>item</code> objects.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(cm)arrayWithArray:nextItem:repeated:":{"name":"+arrayWithArray:nextItem:repeated:","abstract":"<p>Creates a mutable array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by <code>repeated</code> number of times.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSMutableArray(FunkyUtilities).html#/c:objc(cs)NSMutableArray(cm)arrayWithArray:nextItem:until:":{"name":"+arrayWithArray:nextItem:until:","abstract":"<p>Creates a mutable array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by until the block parameter <code>until</code> returns YES.</p>","parent_name":"NSMutableArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)all:":{"name":"-all:","abstract":"<p>Returns whether the condition matches all elements in the array</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)none:":{"name":"-none:","abstract":"<p>Returns whether the condition matches no elements in the array</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)contains:":{"name":"-contains:","abstract":"<p>Returns whether the condition matches at least one element in the array</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)count:":{"name":"-count:","abstract":"<p>Returns the number of elements the given condition matches in the array, like if you would filter the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)map:":{"name":"-map:","abstract":"<p>Returns a new NSArray instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)nilTolerantMap:":{"name":"-nilTolerantMap:","abstract":"<p>Returns a new NSArray instance where each element is transformed to another by returning a new object in the block parameter. It ignores the nil parameters returned from the block.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)mapWithIndex:":{"name":"-mapWithIndex:","abstract":"<p>Same as map, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)nilTolerantMapWithIndex:":{"name":"-nilTolerantMapWithIndex:","abstract":"<p>Same as nil-tolerant map, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)flatMap:":{"name":"-flatMap:","abstract":"<p>Returns a new NSArray instance with the same amount of elements, where each element is transformed to another by returning a new object in the block parameter. Same as map, but the result is going to be flattened, so if you return an NSArray any iteration, it is going to be converted into a flat structure, not an array of arrays.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)flatMapWithIndex:":{"name":"-flatMapWithIndex:","abstract":"<p>Same as flatMap, but the block contains the index of the current element.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)filtered:":{"name":"-filtered:","abstract":"<p>Returns a new NSArray instance with the element, that are passing the returned expression in the original array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)flattened":{"name":"-flattened","abstract":"<p>Flattens the array, meaning that if it consisted of Array items, they are going to be flattened into one flat structure of elements. An array of arrays will transform to an array of elements from each of the previous arrays. This computation is performed deeply, meaning that it contontued flattening elements, until they produce a flat structure.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)merged:":{"name":"-merged:","abstract":"<p>Returns a new NSArray instance, in which concatenates the two arrays by putting the existing elements first, and the elements in the provided array after them.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)forEach:":{"name":"-forEach:","abstract":"<p>Calls every element of the array once.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)forEachWithIndex:":{"name":"-forEachWithIndex:","abstract":"<p>Calls every element of the array once. Same as forEach, but the block contains the index of the current element as well.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)groupByUsingFirst:":{"name":"-groupByUsingFirst:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, this function will use the first matching element.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)groupByUsingLast:":{"name":"-groupByUsingLast:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. If multiple elements are returned with the same key, this function will use the last matching element.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)associateBy:":{"name":"-associateBy:","abstract":"<p>Groups elements to an NSDictionary, where the returned element serves as a key, and the objects as the value. The elements in the resulting Dictionary are arrays, so if multiple elements return the same keys, all of them are going to be included in the value.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)reduce:withInitialValue:":{"name":"-reduce:withInitialValue:","abstract":"<p>Produces an aggregated value based on the elements of the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)sum:":{"name":"-sum:","abstract":"<p>A special use-case of reduce, which summarises the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)average:":{"name":"-average:","abstract":"<p>A special use-case of reduce, which takes the average value of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)minValue:":{"name":"-minValue:","abstract":"<p>A special use-case of reduce, which takes the minimum of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)maxValue:":{"name":"-maxValue:","abstract":"<p>A special use-case of reduce, which takes the maximum of the returned double values for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)minItems:":{"name":"-minItems:","abstract":"<p>Returns an array with all the minimal value elements in the array, where the minimum was computed by the returned double value for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)maxItems:":{"name":"-maxItems:","abstract":"<p>Returns an array with all the maximal value elements in the array, where the maximum was computed by the returned double value for each element in the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)firstIndex":{"name":"-firstIndex","abstract":"<p>Returns the first index of the array: 0</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)lastIndex":{"name":"-lastIndex","abstract":"<p>Returns the last index of the array: count - 1</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)first:":{"name":"-first:","abstract":"<p>Returns the first element, where the predicate matches</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)firstIndex:":{"name":"-firstIndex:","abstract":"<p>Returns the index of the first element, where the predicate matches</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)last:":{"name":"-last:","abstract":"<p>Returns the last element, where the predicate matches</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)lastIndex:":{"name":"-lastIndex:","abstract":"<p>Returns the index of the last element, where the predicate matches</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)take:":{"name":"-take:","abstract":"<p>Returns an array of the values where the predicate matches, but only until it&rsquo;s a consecutive sequence. Once the predicate returns NO, those elements are going to be dropped.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)takeLast:":{"name":"-takeLast:","abstract":"<p>Returns an array of the values where the predicate matches, but only the last consecutive sequence of these element. Same as take, but from the end of the array.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueExclusive:":{"name":"-fromValueExclusive:","abstract":"<p>Returns an array of the values starting from the given object, not including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueInclusive:":{"name":"-fromValueInclusive:","abstract":"<p>Returns an array of the values starting from the given object, including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexExclusive:":{"name":"-fromIndexExclusive:","abstract":"<p>Returns an array of the values starting from the given index, not including the object at the given index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexInclusive:":{"name":"-fromIndexInclusive:","abstract":"<p>Returns an array of the values starting from the given index, including the object at the fiven index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)untilValueExclusive:":{"name":"-untilValueExclusive:","abstract":"<p>Returns an array of the values until the given object, not including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)untilValueInclusive:":{"name":"-untilValueInclusive:","abstract":"<p>Returns an array of the values until the given object, including the object itself. If the given object does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)untilIndexExclusive:":{"name":"-untilIndexExclusive:","abstract":"<p>Returns an array of the values until the given index, not including the object at the given index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)untilIndexInclusive:":{"name":"-untilIndexInclusive:","abstract":"<p>Returns an array of the values until the given index, including the object at the fiven index. If the given index does not exist in the array, the result is going to be an empty NSArray.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueExclusive:untilValueExclusive:":{"name":"-fromValueExclusive:untilValueExclusive:","abstract":"<p>Returns an array of the values between the given two input objects, excluding both from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueExclusive:untilValueInclusive:":{"name":"-fromValueExclusive:untilValueInclusive:","abstract":"<p>Returns an array of the values between the given two input objects, excluding <code>from</code>, including <code>until</code> from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueInclusive:untilValueExclusive:":{"name":"-fromValueInclusive:untilValueExclusive:","abstract":"<p>Returns an array of the values between the given two input objects, including <code>from</code>, excluding <code>until</code> from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromValueInclusive:untilValueInclusive:":{"name":"-fromValueInclusive:untilValueInclusive:","abstract":"<p>Returns an array of the values between the given two input objects, including both from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexExclusive:untilIndexExclusive:":{"name":"-fromIndexExclusive:untilIndexExclusive:","abstract":"<p>Returns an array of the values between the given two indices, excluding both objects (at the given indices) from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexExclusive:untilIndexInclusive:":{"name":"-fromIndexExclusive:untilIndexInclusive:","abstract":"<p>Returns an array of the values between the given two indices, excluding the object at the index <code>from</code>, including the one at the index <code>until</code> from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexInclusive:untilIndexExclusive:":{"name":"-fromIndexInclusive:untilIndexExclusive:","abstract":"<p>Returns an array of the values between the given two indices, including the object at the index <code>from</code>, excluding the one at the index <code>until</code> from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)fromIndexInclusive:untilIndexInclusive:":{"name":"-fromIndexInclusive:untilIndexInclusive:","abstract":"<p>Returns an array of the values between the given two indices, including both objects (at the given indices) from the result set.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)unique":{"name":"-unique","abstract":"<p>Returns an array where is object is unique, so the resulting array does not contain any duplicates.","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)reversed":{"name":"-reversed","abstract":"<p>Returns an array where the items are in a reversed order.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)shuffled":{"name":"-shuffled","abstract":"<p>Returns an array where the items are shuffled randomly.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(im)sorted:":{"name":"-sorted:","abstract":"<p>Returns an array sorted using the given comparator.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(cm)arrayWithItem:repeated:":{"name":"+arrayWithItem:repeated:","abstract":"<p>Creates an array by repeating the same <code>item</code> by <code>repeat</code> number of times. The size of the array is going to be qual to <code>repeat</code>, only consisting of <code>item</code> objects.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(cm)arrayWithArray:nextItem:repeated:":{"name":"+arrayWithArray:nextItem:repeated:","abstract":"<p>Creates an array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by <code>repeated</code> number of times.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSArray(FunkyUtilities).html#/c:objc(cs)NSArray(cm)arrayWithArray:nextItem:until:":{"name":"+arrayWithArray:nextItem:until:","abstract":"<p>Creates an array by taking an initial <code>array</code> and computing the next items by repeatedly putting the result of <code>block</code> by until the block parameter <code>until</code> returns YES.</p>","parent_name":"NSArray(FunkyUtilities)"},"Categories/NSMutableSet(FunkyNilTolerant).html#/c:objc(cs)NSMutableSet(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSMutableSet into a nil-tolerant collection, with the same content.</p>","parent_name":"NSMutableSet(FunkyNilTolerant)"},"Categories/NSMutableSet(FunkyNilTolerant).html#/c:objc(cs)NSMutableSet(cm)nilTolerantSet":{"name":"+nilTolerantSet","abstract":"<p>This method creates a new nil-tolerant mutable collection.</p>","parent_name":"NSMutableSet(FunkyNilTolerant)"},"Categories/NSMutableSet(FunkyNilTolerant).html#/c:objc(cs)NSMutableSet(cm)nilTolerantSetWithCapacity:":{"name":"+nilTolerantSetWithCapacity:","abstract":"<p>This method creates a new nil-tolerant mutable collection by providing its capacity.</p>","parent_name":"NSMutableSet(FunkyNilTolerant)"},"Categories/NSSet(FunkyNilTolerant).html#/c:objc(cs)NSSet(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSSet into a nil-tolerant collection, with the same content.</p>","parent_name":"NSSet(FunkyNilTolerant)"},"Categories/NSSet(FunkyNilTolerant).html#/c:objc(cs)NSSet(cm)nilTolerantSet":{"name":"+nilTolerantSet","abstract":"<p>This method creates a new nil-tolerant collection.</p>","parent_name":"NSSet(FunkyNilTolerant)"},"Categories/NSMutableSet(FunkyNilStoring).html#/c:objc(cs)NSMutableSet(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSMutableSet into a nil-storing collection, with the same content.</p>","parent_name":"NSMutableSet(FunkyNilStoring)"},"Categories/NSMutableSet(FunkyNilStoring).html#/c:objc(cs)NSMutableSet(cm)nilStoringSet":{"name":"+nilStoringSet","abstract":"<p>This method creates a new nil-storing mutable collection.</p>","parent_name":"NSMutableSet(FunkyNilStoring)"},"Categories/NSMutableSet(FunkyNilStoring).html#/c:objc(cs)NSMutableSet(cm)nilStoringSetWithCapacity:":{"name":"+nilStoringSetWithCapacity:","abstract":"<p>This method creates a new nil-storing mutable collection by providing its capacity.</p>","parent_name":"NSMutableSet(FunkyNilStoring)"},"Categories/NSSet(FunkyNilStoring).html#/c:objc(cs)NSSet(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSSet into a nil-storing collection, with the same content.</p>","parent_name":"NSSet(FunkyNilStoring)"},"Categories/NSSet(FunkyNilStoring).html#/c:objc(cs)NSSet(cm)nilStoringSet":{"name":"+nilStoringSet","abstract":"<p>This method creates a new nil-storing collection.</p>","parent_name":"NSSet(FunkyNilStoring)"},"Categories/NSMutableDictionary(FunkyNilTolerant).html#/c:objc(cs)NSMutableDictionary(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSMutableDictionary into a nil-tolerant collection, with the same content.</p>","parent_name":"NSMutableDictionary(FunkyNilTolerant)"},"Categories/NSMutableDictionary(FunkyNilTolerant).html#/c:objc(cs)NSMutableDictionary(cm)nilTolerantDictionary":{"name":"+nilTolerantDictionary","abstract":"<p>This method creates a new nil-tolerant mutable collection.</p>","parent_name":"NSMutableDictionary(FunkyNilTolerant)"},"Categories/NSMutableDictionary(FunkyNilTolerant).html#/c:objc(cs)NSMutableDictionary(cm)nilTolerantDictionaryWithCapacity:":{"name":"+nilTolerantDictionaryWithCapacity:","abstract":"<p>This method creates a new nil-tolerant mutable collection by providing its capacity.</p>","parent_name":"NSMutableDictionary(FunkyNilTolerant)"},"Categories/NSDictionary(FunkyNilTolerant).html#/c:objc(cs)NSDictionary(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSDictionary into a nil-tolerant collection, with the same content.</p>","parent_name":"NSDictionary(FunkyNilTolerant)"},"Categories/NSDictionary(FunkyNilTolerant).html#/c:objc(cs)NSDictionary(cm)nilTolerantDictionary":{"name":"+nilTolerantDictionary","abstract":"<p>This method creates a new nil-tolerant collection.</p>","parent_name":"NSDictionary(FunkyNilTolerant)"},"Categories/NSMutableDictionary(FunkyNilStoring).html#/c:objc(cs)NSMutableDictionary(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSMutableDictionary into a nil-storing collection, with the same content.</p>","parent_name":"NSMutableDictionary(FunkyNilStoring)"},"Categories/NSMutableDictionary(FunkyNilStoring).html#/c:objc(cs)NSMutableDictionary(cm)nilStoringDictionary":{"name":"+nilStoringDictionary","abstract":"<p>This method creates a new nil-storing mutable collection.</p>","parent_name":"NSMutableDictionary(FunkyNilStoring)"},"Categories/NSMutableDictionary(FunkyNilStoring).html#/c:objc(cs)NSMutableDictionary(cm)nilStoringDictionaryWithCapacity:":{"name":"+nilStoringDictionaryWithCapacity:","abstract":"<p>This method creates a new nil-storing mutable collection by providing its capacity.</p>","parent_name":"NSMutableDictionary(FunkyNilStoring)"},"Categories/NSDictionary(FunkyNilStoring).html#/c:objc(cs)NSDictionary(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSDictionary into a nil-storing collection, with the same content.</p>","parent_name":"NSDictionary(FunkyNilStoring)"},"Categories/NSDictionary(FunkyNilStoring).html#/c:objc(cs)NSDictionary(cm)nilStoringDictionary":{"name":"+nilStoringDictionary","abstract":"<p>This method creates a new nil-storing collection.</p>","parent_name":"NSDictionary(FunkyNilStoring)"},"Categories/NSMutableArray(FunkyNilTolerant).html#/c:objc(cs)NSMutableArray(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSMutableArray into a nil-tolerant collection, with the same content.</p>","parent_name":"NSMutableArray(FunkyNilTolerant)"},"Categories/NSMutableArray(FunkyNilTolerant).html#/c:objc(cs)NSMutableArray(cm)nilTolerantArray":{"name":"+nilTolerantArray","abstract":"<p>This method creates a new nil-tolerant mutable collection.</p>","parent_name":"NSMutableArray(FunkyNilTolerant)"},"Categories/NSMutableArray(FunkyNilTolerant).html#/c:objc(cs)NSMutableArray(cm)nilTolerantArrayWithCapacity:":{"name":"+nilTolerantArrayWithCapacity:","abstract":"<p>This method creates a new nil-tolerant mutable collection by providing its capacity.</p>","parent_name":"NSMutableArray(FunkyNilTolerant)"},"Categories/NSArray(FunkyNilTolerant).html#/c:objc(cs)NSArray(im)nilTolerant":{"name":"-nilTolerant","abstract":"<p>This method converts the regular NSArray into a nil-tolerant collection, with the same content.</p>","parent_name":"NSArray(FunkyNilTolerant)"},"Categories/NSArray(FunkyNilTolerant).html#/c:objc(cs)NSArray(cm)nilTolerantArray":{"name":"+nilTolerantArray","abstract":"<p>This method creates a new nil-tolerant collection.</p>","parent_name":"NSArray(FunkyNilTolerant)"},"Categories/NSMutableArray(FunkyNilStoring).html#/c:objc(cs)NSMutableArray(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSMutableArray into a nil-storing collection, with the same content.</p>","parent_name":"NSMutableArray(FunkyNilStoring)"},"Categories/NSMutableArray(FunkyNilStoring).html#/c:objc(cs)NSMutableArray(cm)nilStoringArray":{"name":"+nilStoringArray","abstract":"<p>This method creates a new nil-storing mutable collection.</p>","parent_name":"NSMutableArray(FunkyNilStoring)"},"Categories/NSMutableArray(FunkyNilStoring).html#/c:objc(cs)NSMutableArray(cm)nilStoringArrayWithCapacity:":{"name":"+nilStoringArrayWithCapacity:","abstract":"<p>This method creates a new nil-storing mutable collection by providing its capacity.</p>","parent_name":"NSMutableArray(FunkyNilStoring)"},"Categories/NSArray(FunkyNilStoring).html#/c:objc(cs)NSArray(im)nilStoring":{"name":"-nilStoring","abstract":"<p>This method converts the regular NSArray into a nil-storing collection, with the same content.</p>","parent_name":"NSArray(FunkyNilStoring)"},"Categories/NSArray(FunkyNilStoring).html#/c:objc(cs)NSArray(cm)nilStoringArray":{"name":"+nilStoringArray","abstract":"<p>This method creates a new nil-storing collection.</p>","parent_name":"NSArray(FunkyNilStoring)"},"Categories/NSArray(FunkyNilStoring).html":{"name":"NSArray(FunkyNilStoring)","abstract":"<p>This is a category on NSArray to convert the current set into a nil-storing collection.</p>"},"Categories/NSMutableArray(FunkyNilStoring).html":{"name":"NSMutableArray(FunkyNilStoring)","abstract":"<p>This is a category on NSMutableArray to convert the current set into a nil-storing collection.</p>"},"Categories/NSArray(FunkyNilTolerant).html":{"name":"NSArray(FunkyNilTolerant)","abstract":"<p>This is a category on NSArray to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSMutableArray(FunkyNilTolerant).html":{"name":"NSMutableArray(FunkyNilTolerant)","abstract":"<p>This is a category on NSMutableArray to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSDictionary(FunkyNilStoring).html":{"name":"NSDictionary(FunkyNilStoring)","abstract":"<p>This is a category on NSDictionary to convert the current set into a nil-storing collection.</p>"},"Categories/NSMutableDictionary(FunkyNilStoring).html":{"name":"NSMutableDictionary(FunkyNilStoring)","abstract":"<p>This is a category on NSMutableDictionary to convert the current set into a nil-storing collection.</p>"},"Categories/NSDictionary(FunkyNilTolerant).html":{"name":"NSDictionary(FunkyNilTolerant)","abstract":"<p>This is a category on NSDictionary to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSMutableDictionary(FunkyNilTolerant).html":{"name":"NSMutableDictionary(FunkyNilTolerant)","abstract":"<p>This is a category on NSMutableDictionary to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSSet(FunkyNilStoring).html":{"name":"NSSet(FunkyNilStoring)","abstract":"<p>This is a category on NSSet to convert the current set into a nil-storing collection.</p>"},"Categories/NSMutableSet(FunkyNilStoring).html":{"name":"NSMutableSet(FunkyNilStoring)","abstract":"<p>This is a category on NSMutableSet to convert the current set into a nil-storing collection.</p>"},"Categories/NSSet(FunkyNilTolerant).html":{"name":"NSSet(FunkyNilTolerant)","abstract":"<p>This is a category on NSSet to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSMutableSet(FunkyNilTolerant).html":{"name":"NSMutableSet(FunkyNilTolerant)","abstract":"<p>This is a category on NSMutableSet to convert the current set into a nil-tolerant collection.</p>"},"Categories/NSArray(FunkyUtilities).html":{"name":"NSArray(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSArray."},"Categories/NSMutableArray(FunkyUtilities).html":{"name":"NSMutableArray(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableArray."},"Categories/NSDictionary(FunkyUtilities).html":{"name":"NSDictionary(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSDictionary."},"Categories/NSMutableDictionary(FunkyUtilities).html":{"name":"NSMutableDictionary(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableDictionary."},"Categories/NSObject(FunkyUtilities).html":{"name":"NSObject(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSObject."},"Categories/NSSet(FunkyUtilities).html":{"name":"NSSet(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSSet."},"Categories/NSMutableSet(FunkyUtilities).html":{"name":"NSMutableSet(FunkyUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableSet."},"Categories/NSArray(FunkyPrefixedUtilities).html":{"name":"NSArray(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSArray."},"Categories/NSMutableArray(FunkyPrefixedUtilities).html":{"name":"NSMutableArray(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableArray."},"Categories/NSDictionary(FunkyPrefixedUtilities).html":{"name":"NSDictionary(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSDictionary."},"Categories/NSMutableDictionary(FunkyPrefixedUtilities).html":{"name":"NSMutableDictionary(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableDictionary."},"Categories/NSObject(FunkyPrefixedUtilities).html":{"name":"NSObject(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSObject."},"Categories/NSSet(FunkyPrefixedUtilities).html":{"name":"NSSet(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSSet."},"Categories/NSMutableSet(FunkyPrefixedUtilities).html":{"name":"NSMutableSet(FunkyPrefixedUtilities)","abstract":"<p>This extension provides simple and easy to use functional and general utilities for NSMutableSet."},"getting-started.html":{"name":"Getting started"},"nil-storing-collections.html":{"name":"nil-storing collections"},"nil-tolerant-collections.html":{"name":"nil-tolerant collections"},"nsarray-utilities.html":{"name":"NSArray utilities"},"nsdictionary-utilities.html":{"name":"NSDictionary utilities"},"nsobject-utilities.html":{"name":"NSObject utilities"},"nsset-utilities.html":{"name":"NSSet utilities"},"subpods.html":{"name":"SubPods"},"Guides.html":{"name":"Guides","abstract":"<p>The following guides are available globally.</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Type Definitions.html":{"name":"Type Definitions","abstract":"<p>The following type definitions are available globally.</p>"}}